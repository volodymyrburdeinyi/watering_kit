#include <Wire.h>
#include "src/U8glib/U8glib.h"
U8GLIB_SH1106_128X64 u8g(U8G_I2C_OPT_NONE);    // I2C
#include "Wire.h"
#include "src/RTClib/src/RTClib.h"
RTC_DS1307 RTC;

// set all moisture sensors PIN ID
int moisture1 = A0;
int moisture2 = A1;
int moisture3 = A2;
int moisture4 = A3;

// declare moisture values
int moisture1_value = 0 ;
int moisture2_value = 0;
int moisture3_value = 0;
int moisture4_value = 0;

// set water relays
int relay1 = 6;
int relay2 = 8;
int relay3 = 9;
int relay4 = 10;

// set water pump
int pump = 4;

// set button
int button = 12;

//pump state    1:open   0:close
int pump_state_flag = 0;

//relay1 state    1:open   0:close
int relay1_state_flag = 0;

//relay2 state   1:open   0:close
int relay2_state_flag = 0;

//relay3 state  1:open   0:close
int relay3_state_flag = 0;

//relay4 state   1:open   0:close
int relay4_state_flag = 0;

static unsigned long currentMillis_send = 0;
static unsigned long  Lasttime_send = 0;

char daysOfTheWeek[7][4] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
unsigned long nowtime;
unsigned long endtime;
unsigned long nowtimeNext;
unsigned long nowtime1;
unsigned long endtime1;
unsigned long nowtimeNext1;
unsigned long nowtime2;
unsigned long endtime2;
unsigned long nowtimeNext2;
unsigned long nowtime3;
unsigned long endtime3;
unsigned long nowtimeNext3;


// good flower
unsigned char bitmap_good[] U8G_PROGMEM = {

  0x00, 0x42, 0x4C, 0x00, 0x00, 0xE6, 0x6E, 0x00, 0x00, 0xAE, 0x7B, 0x00, 0x00, 0x3A, 0x51, 0x00,
  0x00, 0x12, 0x40, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x06, 0x40, 0x00, 0x00, 0x06, 0x40, 0x00,
  0x00, 0x04, 0x60, 0x00, 0x00, 0x0C, 0x20, 0x00, 0x00, 0x08, 0x30, 0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0xE0, 0x0F, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0xC1, 0x00, 0x00, 0x0E, 0x61, 0x00,
  0x00, 0x1C, 0x79, 0x00, 0x00, 0x34, 0x29, 0x00, 0x00, 0x28, 0x35, 0x00, 0x00, 0x48, 0x17, 0x00,
  0x00, 0xD8, 0x1B, 0x00, 0x00, 0x90, 0x1B, 0x00, 0x00, 0xB0, 0x09, 0x00, 0x00, 0xA0, 0x05, 0x00,
  0x00, 0xE0, 0x07, 0x00, 0x00, 0xC0, 0x03, 0x00
};

// bad flower
unsigned char bitmap_bad[] U8G_PROGMEM = {
  0x00, 0x80, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0xE0, 0x0D, 0x00, 0x00, 0xA0, 0x0F, 0x00,
  0x00, 0x20, 0x69, 0x00, 0x00, 0x10, 0x78, 0x02, 0x00, 0x10, 0xC0, 0x03, 0x00, 0x10, 0xC0, 0x03,
  0x00, 0x10, 0x00, 0x01, 0x00, 0x10, 0x80, 0x00, 0x00, 0x10, 0xC0, 0x00, 0x00, 0x30, 0x60, 0x00,
  0x00, 0x60, 0x30, 0x00, 0x00, 0xC0, 0x1F, 0x00, 0x00, 0x60, 0x07, 0x00, 0x00, 0x60, 0x00, 0x00,
  0x00, 0x60, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xC7, 0x1C, 0x00,
  0x80, 0x68, 0x66, 0x00, 0xC0, 0x33, 0x7B, 0x00, 0x40, 0xB6, 0x4D, 0x00, 0x00, 0xE8, 0x06, 0x00,
  0x00, 0xF0, 0x03, 0x00, 0x00, 0xE0, 0x00, 0x00
};

// Elecrow Logo
static unsigned char bitmap_logo[] U8G_PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0xF8, 0xFF, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0xFE, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x1F, 0xE0, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xB0, 0x07, 0x80, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xE0, 0x03, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xC0, 0x00, 0x00, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x80, 0x01, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0x23, 0x00, 0x7C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0xC7, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0x9E, 0x0F, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0x3C, 0xFE, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x70, 0x78, 0xF8, 0x7F, 0xF0, 0x9F, 0x07, 0xFE, 0x83, 0x0F, 0xFF, 0x00, 0x77, 0x3C, 0x18, 0x1C,
  0x70, 0xF0, 0xE1, 0x3F, 0xF1, 0x9F, 0x07, 0xFE, 0xE1, 0x1F, 0xFF, 0xC3, 0xF7, 0x3C, 0x38, 0x0C,
  0x70, 0xE0, 0x87, 0x8F, 0xF1, 0xC0, 0x07, 0x1E, 0x70, 0x3C, 0xCF, 0xE3, 0xE1, 0x7D, 0x3C, 0x0E,
  0x70, 0xD0, 0x1F, 0xC0, 0xF1, 0xC0, 0x03, 0x1F, 0x78, 0x3C, 0xCF, 0xE3, 0xE1, 0x7D, 0x3C, 0x06,
  0xF0, 0xB0, 0xFF, 0xF1, 0xF0, 0xC0, 0x03, 0x0F, 0x78, 0x3C, 0xCF, 0xF3, 0xE0, 0x7B, 0x3E, 0x06,
  0xF0, 0x60, 0xFF, 0xFF, 0xF0, 0xC6, 0x03, 0xEF, 0x3C, 0x80, 0xEF, 0xF1, 0xE0, 0x7B, 0x3E, 0x03,
  0xF0, 0xE1, 0xFC, 0xFF, 0xF8, 0xCF, 0x03, 0xFF, 0x3C, 0x80, 0xFF, 0xF0, 0xE0, 0x7B, 0x7B, 0x01,
  0xE0, 0xC3, 0xF9, 0x7F, 0x78, 0xC0, 0x03, 0x0F, 0x3C, 0x80, 0xF7, 0xF1, 0xE0, 0xF9, 0xF9, 0x01,
  0xE0, 0x83, 0xE3, 0x7F, 0x78, 0xE0, 0x03, 0x0F, 0x3C, 0xBC, 0xE7, 0xF1, 0xE0, 0xF9, 0xF9, 0x00,
  0xC0, 0x0F, 0x8F, 0x3F, 0x78, 0xE0, 0x81, 0x0F, 0x3C, 0x9E, 0xE7, 0xF1, 0xE0, 0xF1, 0xF8, 0x00,
  0x80, 0x3F, 0x1E, 0x00, 0x78, 0xE0, 0x81, 0x07, 0x38, 0x9E, 0xE7, 0xF1, 0xF0, 0xF0, 0x78, 0x00,
  0x80, 0xFF, 0xFF, 0x00, 0xF8, 0xEF, 0xBF, 0xFF, 0xF8, 0xCF, 0xE7, 0xE1, 0x7F, 0x70, 0x70, 0x00,
  0x00, 0xFF, 0xFF, 0x0F, 0xF8, 0xEF, 0xBF, 0xFF, 0xE0, 0xC3, 0xE3, 0x81, 0x1F, 0x70, 0x30, 0x00,
  0x00, 0xFC, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xF8, 0xFF, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xE0, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


static unsigned char bitmap_T[] U8G_PROGMEM = {
  0xF7, 0x01, 0x1D, 0x03, 0x0B, 0x02, 0x0C, 0x02, 0x0C, 0x00, 0x0C, 0x00, 0x0C, 0x00, 0x08, 0x02,
  0x18, 0x03, 0xF0, 0x01
};

static unsigned char bitmap_H[] U8G_PROGMEM = {
  0x00, 0x00, 0x80, 0x01, 0xC0, 0x03, 0xE0, 0x07, 0xF0, 0x0F, 0xF8, 0x1F, 0xF8, 0x1F, 0xFC, 0x3F,
  0xFC, 0x3F, 0xFE, 0x7F, 0xEE, 0x7F, 0xB3, 0xF7, 0xBB, 0xFB, 0xBB, 0xFD, 0xBB, 0xFD, 0xC7, 0xFE,
  0x7F, 0xC3, 0x3F, 0xDD, 0xBF, 0xFD, 0xDF, 0xDD, 0xEE, 0x5B, 0xFE, 0x7F, 0xFC, 0x3F, 0xF8, 0x1F,
  0xE0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

uint32_t currentTimeMillis = 0;
uint32_t lastMeasureTimeMillis = 0;
uint32_t lastSetStateTimeMillis = 0;
uint32_t lastScreenUpdateTimeMillis = 0;
uint16_t measureTimeIntervalMillis = 1000;
uint16_t setStateIntervalMillis = 1000;
uint16_t screenUpdateIntervalMillis = 1000;
DateTime pumpOnLastDateTime;
byte showPumpLastOnTimeOncePerScreensUpdate = 8;
byte screenUpdateNumber = 1;

void setup()
{
  u8g.firstPage();
  do {
    draw_elecrow();
    //    drawLogo(0);
  } while (u8g.nextPage());

  delay(1000);

  Wire.begin();
  RTC.begin();
  Serial.begin(9600);
  // declare relay as output
  pinMode(relay1, OUTPUT);
  pinMode(relay2, OUTPUT);
  pinMode(relay3, OUTPUT);
  pinMode(relay4, OUTPUT);
  // declare pump as output
  pinMode(pump, OUTPUT);
  // declare switch as input
  pinMode(button, INPUT);
  //pinMode(ROTARY_ANGLE_SENSOR, INPUT);

  if (false) {
    Serial.println("RTC power failure, resetting the time!");
    RTC.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }
}

int button_state = 0;
void loop()
{
  currentTimeMillis = millis();


  // read the value from the moisture sensors:
  if (currentTimeMillis - lastMeasureTimeMillis > measureTimeIntervalMillis) {
    updateSensorMeasurements();
    lastMeasureTimeMillis = millis();

    if (currentTimeMillis - lastSetStateTimeMillis > setStateIntervalMillis) {
      computeRelayAndPumpState();
      flushRelayAndPumpState();
      lastSetStateTimeMillis = millis();
    }
  }

  if (currentTimeMillis - lastScreenUpdateTimeMillis > screenUpdateIntervalMillis || button_state != digitalRead(button)) {
    button_state = digitalRead(button);
    if (button_state == 1) {
      if (screenUpdateNumber % showPumpLastOnTimeOncePerScreensUpdate == 0) {
        u8g.firstPage();
        do {
          draw_time(pumpOnLastDateTime);
          u8g.drawStr(0, 55 , "last time pumpON");
        } while (u8g.nextPage());
      } else {
        u8g.firstPage();
        do {
          drawTH();
          drawflower();

        } while (u8g.nextPage());
      }
    } else {
      u8g.firstPage();
      do {
        DateTime now = RTC.now();
        draw_time(now);
        u8g.drawStr(8, 55 , "www.elecrow.com");
      } while (u8g.nextPage());
    }

    screenUpdateNumber++;
    lastScreenUpdateTimeMillis = millis();
  }
}

void updateSensorMeasurements()
{
  float value1 = analogRead(A0);
  moisture1_value = map(value1, 590, 360, 0, 100);
  if (moisture1_value < 0) {
    moisture1_value = 0;
  }

  float value2 = analogRead(A1);
  moisture2_value = map(value2, 600, 360, 0, 100);
  if (moisture2_value < 0) {
    moisture2_value = 0;
  }

  float value3 = analogRead(A2);
  moisture3_value = map(value3, 600, 360, 0, 100);
  if (moisture3_value < 0) {
    moisture3_value = 0;
  }

  float value4 = analogRead(A3);
  moisture4_value = map(value4, 600, 360, 0, 100);
  if (moisture4_value < 0) {
    moisture4_value = 0;
  }
}

void computeRelayAndPumpState()
{
  if (moisture1_value < 30) {
    relay1_state_flag = 1;
  } else if (moisture1_value > 55) {
    relay1_state_flag = 0;
  }

  if (moisture2_value < 30) {
    relay2_state_flag = 1;
  } else if (moisture2_value > 55) {
    relay2_state_flag = 0;
  }

  if (moisture3_value < 30) {
    relay3_state_flag = 1;
  } else if (moisture3_value > 55) {
    relay3_state_flag = 0;
  }

  if (moisture4_value < 30) {
    relay4_state_flag = 1;
  } else if (moisture4_value > 55) {
    relay4_state_flag = 0;
  }

  pump_state_flag = relay1_state_flag || relay2_state_flag || relay3_state_flag || relay4_state_flag;
}

void flushRelayAndPumpState() {
  if (!pump_state_flag) {
    digitalWrite(pump, pump_state_flag);
    delay(10);
  }

  digitalWrite(relay1, relay1_state_flag);
  digitalWrite(relay2, relay2_state_flag);
  digitalWrite(relay3, relay3_state_flag);
  digitalWrite(relay4, relay4_state_flag);

  if (pump_state_flag) {
    delay(10);
    digitalWrite(pump, pump_state_flag);
    pumpOnLastDateTime = RTC.now();
  }
}

void draw_elecrow() {
  u8g.setFont(u8g_font_gdr9r);
  u8g.drawStr(8, 55 , "www.elecrow.com");
  u8g.drawXBMP(0, 5, 128, 32, bitmap_logo);
}


void draw_time(DateTime now)
{
  int x = 12;

  if (! RTC.isrunning()) {
    u8g.setFont(u8g_font_6x10);
    u8g.setPrintPos(5, 20);
    u8g.print("RTC is NOT running!");
    RTC.adjust(DateTime(__DATE__, __TIME__));
  } else {
    u8g.setFont(u8g_font_7x13);
    u8g.setPrintPos(x, 11);
    u8g.print(now.year(), DEC);
    u8g.setPrintPos(x + 80, 11);
    u8g.print(daysOfTheWeek[now.dayOfTheWeek()]);
    u8g.setPrintPos(x + 28, 11);

    u8g.print("/");

    u8g.setPrintPos(x + 33, 11);
    if (now.month() < 10) {
      u8g.print(0, DEC);
      u8g.setPrintPos(x + 40, 11);
    }
    u8g.print(now.month(), DEC);

    u8g.setPrintPos(x + 47, 11);
    u8g.print("/");

    u8g.setPrintPos(x + 53, 11);
    if (now.day() < 10) {
      u8g.print(0, DEC);
      u8g.setPrintPos(x + 60, 11);
    }
    u8g.print(now.day(), DEC);

    u8g.setFont(u8g_font_8x13);
    int x = 35;
    u8g.setPrintPos(x, 33);
    if (now.hour() < 10) {
      u8g.print(0, DEC);
      u8g.setPrintPos(x + 7, 33);
    }
    u8g.print(now.hour(), DEC);

    u8g.setPrintPos(x + 15, 33);
    u8g.print(":");

    u8g.setPrintPos(x + 21, 33);
    if (now.minute() < 10) {
      u8g.print(0, DEC);
      u8g.setPrintPos(x + 28, 33);
    }
    u8g.print(now.minute(), DEC);

    u8g.setPrintPos(x + 36, 33);
    u8g.print(":");

    u8g.setPrintPos(x + 42, 33);
    if (now.second() < 10) {
      u8g.print(0, DEC);
      u8g.setPrintPos(x + 49, 33);
    }
    u8g.print(now.second(), DEC);
  }
}

void drawLogo(uint8_t d)
{
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(8 + d, 30 + d, "E");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(30 + d, 30 + d, "l");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(40 + d, 30 + d, "e");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(55 + d, 30 + d, "c");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(70 + d, 30 + d, "r");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(85 + d, 30 + d, "o");
  u8g.setFont(u8g_font_gdr25r);
  u8g.drawStr(100 + d, 30 + d, "w");
}


//Style the flowers     bitmap_bad: bad flowers     bitmap_good:good  flowers
void drawflower()
{
  if (moisture1_value < 30) {
    u8g.drawXBMP(0, 0, 32, 30, bitmap_bad);
  } else {
    u8g.drawXBMP(0, 0, 32, 30, bitmap_good);
  }

  if (moisture2_value < 30) {
    u8g.drawXBMP(32, 0, 32, 30, bitmap_bad);
  } else {
    u8g.drawXBMP(32, 0, 32, 30, bitmap_good);
  }

  if (moisture3_value < 30) {
    u8g.drawXBMP(64, 0, 32, 30, bitmap_bad);
  } else {
    u8g.drawXBMP(64, 0, 32, 30, bitmap_good);
  }

  if (moisture4_value < 30) {
    u8g.drawXBMP(96, 0, 32, 30, bitmap_bad);
  } else {
    u8g.drawXBMP(96, 0, 32, 30, bitmap_good);
  }
}


void drawTH()
{
  int A = 0;
  int B = 0;
  int C = 64;
  int D = 96;
  char moisture1_value_temp[5] = {0};
  char moisture2_value_temp[5] = {0};
  char moisture3_value_temp[5] = {0};
  char moisture4_value_temp[5] = {0};

  itoa(moisture1_value, moisture1_value_temp, 10);
  itoa(moisture2_value, moisture2_value_temp, 10);
  itoa(moisture3_value, moisture3_value_temp, 10);
  itoa(moisture4_value, moisture4_value_temp, 10);
  u8g.setFont(u8g_font_7x14);
  u8g.setPrintPos(9, 60);
  u8g.print("A0");

  if (moisture1_value < 10) {
    u8g.drawStr(A + 14, 45, moisture1_value_temp);
  } else if (moisture1_value < 100) {
    u8g.drawStr(A + 7, 45, moisture1_value_temp);
  } else {
    moisture1_value = 100;
    u8g.drawStr(A + 2, 45, moisture1_value_temp);
  }
  u8g.setPrintPos(A + 23, 45 );
  u8g.print("%");

  u8g.setPrintPos(41, 60 );
  u8g.print("A1");
  if (moisture2_value < 10) {
    u8g.drawStr(B + 46, 45, moisture2_value_temp);
  } else if (moisture2_value < 100) {
    u8g.drawStr(B + 39, 45, moisture2_value_temp);
  } else {
    moisture2_value = 100;
    u8g.drawStr(B + 32, 45, moisture2_value_temp);
  }
  u8g.setPrintPos(B + 54, 45);
  u8g.print("%");

  u8g.setPrintPos(73, 60);
  u8g.print("A2");
  if (moisture3_value < 10) {
    u8g.drawStr(C + 14, 45, moisture3_value_temp);
  } else if (moisture3_value < 100) {
    u8g.drawStr(C + 7, 45, moisture3_value_temp);
  } else {
    moisture3_value = 100;
    u8g.drawStr(C + 2, 45, moisture3_value_temp);
  }
  u8g.setPrintPos(C + 23, 45);
  u8g.print("%");

  u8g.setPrintPos(105, 60);
  u8g.print("A3");
  if (moisture4_value < 10) {
    //u8g.setPrintPos(D + 14, 45 );
    u8g.drawStr(D + 14, 45, moisture4_value_temp);
  } else if (moisture4_value < 100) {
    // u8g.setPrintPos(D + 7, 45);
    u8g.drawStr(D + 7, 45, moisture4_value_temp);
  } else {
    //u8g.setPrintPos(D + 2, 45);
    moisture4_value = 100;
    u8g.drawStr(D + 2, 45, moisture4_value_temp);
  }
  //u8g.print(moisture4_value);
  u8g.setPrintPos(D + 23, 45);
  u8g.print("%");
}
